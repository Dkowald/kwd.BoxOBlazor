@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using kwd.BoxOBlazor.Demo.util
@inject Links links
@inject HttpClient Http;
@inject ILogger<ConfigEnvironment> Log;
@inject IWebAssemblyHostEnvironment env;
@inject Clipboard clipboard;

<h3>@Title</h3>

<p>This blazor wasm app is running in <span>@env.Environment</span>.</p>

<p>
    As per <Link Target="ConfigDoc" />,
    the environment is described via a custom http header: <em>blazor-environment</em>.
    When published, a blazor wasm site incudes <em>_framework/blazor.boot.json</em> to
    describe the app. The browser loads this data,
</p>
<p>
    As blazor wasm loads it reads <em>_framework/blazor.boot.json</em>.
    At this point the header is used to define the environment.
</p>

<p>
    For example, to setup using a <Link Target="@links["nginx"]" /> reverse proxy.
</p>
<pre><i @onclick="CopyToClipboard" class="oi oi-clipboard" title="copy to clipboard" aria-hidden="true"></i>
<code @ref="FragmentElement">@NginxFragment</code>
</pre>
@code {
    public string Title = "Blazor wasm set executing environment";

    public string NginxFragment = "Loading...";

    public ElementReference FragmentElement;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Log.LogTrace("Loading nginx config fragment");
        var fragment = await Http.GetStringAsync("SetHeader.nginx.txt");
        NginxFragment = fragment;
    }

    protected async Task CopyToClipboard()
    {
        await clipboard.CopyFromElement(FragmentElement);
    }

    private ExternalLink ConfigDoc = new ExternalLink("blazor docs",
    "https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/environments?view=aspnetcore-3.1");
}
