@using kwd.BoxOBlazor.Services
@inject LocalStorage localStorage
@inject ILogger<LocalStorage> log
@implements IDisposable
<h3>View Local Storage</h3>

@if (!IsSupported)
{
    <p>Local storage not supported on this browser.</p>
    return;
}
<p>
    There are currently @ItemCount items in local storage.
</p>
@foreach (var item in Items)
{
    <p @key="item.Key">
        <span>@item.Key</span> =
        <input type="text" value="@item.Value" @onchange="(evt) => UpdateValue(item.Key, evt)" />
        <button @onclick="(evt)=> DeleteItem(item.Key)">
            <i class="oi oi-minus"></i>
        </button>
    </p>
}

<p>
    <input type="text" placeholder="key"
           value="@NewItem"
           @oninput="NewItemUpdated"
           @onkeypress="NewItemKeyPressed" />
    <button @onclick="AddItem" disabled="@AddIsDisabled">
        <i class="oi oi-plus"></i>
    </button>
    <span>@WhyDisabled</span>
</p>

@code {

    public bool IsSupported { get; set; }

    public string NewItem { get; set; }

    public int ItemCount { get; set; }

    public bool AddIsDisabled { get; set; } = true;

    public string WhyDisabled { get; set; }

    public SortedDictionary<string, string> Items = new SortedDictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        localStorage.Storage += OnStorageChanged;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await localStorage.HookStorageEvent();

            IsSupported = await localStorage.IsSupported();
            if (IsSupported)
            {
                await LoadFromStorage();
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        localStorage.Storage -= OnStorageChanged;
    }

    public void NewItemUpdated(ChangeEventArgs arg)
    {
        var val = arg.Value.ToString().Trim();

        WhyDisabled = "";
        bool addIsDisabled = false;
        if (string.IsNullOrWhiteSpace(val))
        { WhyDisabled = "(cannot be empty)"; addIsDisabled |= true; }

        if (Items.ContainsKey(val))
        { WhyDisabled = "(already exists)"; addIsDisabled |= true; }


        if (addIsDisabled != AddIsDisabled || NewItem != val)
        {
            NewItem = val;
            AddIsDisabled = addIsDisabled;
            StateHasChanged();
        }

    }

    public async Task NewItemKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !AddIsDisabled)
            await AddItem();
    }

    public async Task AddItem()
    {
        await localStorage.SetItem(NewItem.Trim(), "");
        NewItem = "";
        AddIsDisabled = true;

        await LoadFromStorage();
    }

    public async Task UpdateValue(string key, ChangeEventArgs args)
    {
        await localStorage.SetItem(key, args.Value.ToString());

        await LoadFromStorage();
    }

    public async Task DeleteItem(string key)
    {
        if (!Items.ContainsKey(key))
            throw new Exception("Unknown key");

        await localStorage.RemoveItem(key);

        await LoadFromStorage();
    }

    public async Task LoadFromStorage()
    {
        ItemCount = await localStorage.GetLength();

        Items.Clear();
        for (var i = 0; i < ItemCount; i++)
        {
            var k = await localStorage.Key(i);
            Items.Add(k, await localStorage.GetItem(k));
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnStorageChanged() => await LoadFromStorage();
}
