@inject NavigationManager _navManager;
@implements IDisposable
<div class="tile-nav @Active">
    @if(IsAtRootUrl){<i>***</i>}
    <a class="button" href="@RootUrl">
        <i class="fas fa-layer-group"></i>Desk
    </a>
</div>
@code {
    private string _rawRootUrl;

    void IDisposable.Dispose()
    {
        _navManager.LocationChanged -= OnLocationChanged;
    }

    protected override Task OnInitializedAsync()
    {
        _navManager.LocationChanged += OnLocationChanged;
        UpdateIsAtRootUrl();

        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        if(string.IsNullOrWhiteSpace(RootUrl))
            throw new ArgumentNullException(nameof(RootUrl));

        _rawRootUrl = RootUrl.Trim('/').ToLower();
    }

    [Parameter]
    public string RootUrl { get; set; }

    private bool IsAtRootUrl { get; set; }

    private string Active { get; set; } = "";

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        var originalIsAtRoot = IsAtRootUrl;
        UpdateIsAtRootUrl();

        if (originalIsAtRoot != IsAtRootUrl)
        {
            Active = IsAtRootUrl ? "active" : "";

            StateHasChanged();
        }
    }

    private void UpdateIsAtRootUrl()
    {
        var path = _navManager.ToBaseRelativePath(_navManager.Uri).Trim('/');
        IsAtRootUrl = path.ToLower() == _rawRootUrl;
    }
}
